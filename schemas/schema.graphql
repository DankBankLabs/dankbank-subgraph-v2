type Account @entity {
  "User address"
  id: ID!
  "liqudity token balances"
  liquidityTokenBalances: [LpTokenBalance!] @derivedFrom(field: "user")
  "token positions"
  tokenBalances: [TokenBalance!] @derivedFrom(field: "user")
}

type TokenBalance @entity {
  id: ID!
  "token"
  token: TokenVault!
  "Address which holds this position"
  user: Account!
  "The amount of the token the user holds"
  balance: BigInt!
}

enum AuctionState {
  inactive
  live
  ended
  redeemed
}

type TokenVault @entity {
  "address"
  id: ID!
  "token positions"
  tokenPositions: [TokenBalance!] @derivedFrom(field: "token")
  "erc721 token"
  erc721: ERC721Token
  "liquidity pool"
  liquidityPool: LiquidityPool @derivedFrom(field: "token")
  "total supply"
  totalSupply: BigInt!
  "symbol"
  symbol: String!
  "name"
  name: String!
  "decimals"
  decimals: BigInt!
  "address that initially deposited the NFT"
  curator: Account
  "fee paid to curator yearly"
  fee: BigInt
  "the state of the auction"
  auctionState: AuctionState
  "the ETH required to start an auction for the NFT"
  reservePrice: BigInt
  "current price of the token during an auction"
  livePrice: BigInt
  "the account winning the auction"
  winningAccount: Account
}

type ERC721Token @entity {
  id: ID!
  "address"
  address: String!
  "tokenId"
  tokenId: BigInt!
  "tokenVault"
  tokenVault: TokenVault @derivedFrom(field: "erc721")
  "uri"
  uri: String
}

# TokenBalance should be the single source of truth on the LiquidityPool token balance
type LiquidityPool @entity {
  id: ID!
  "token"
  token: TokenVault!
  "eth pool"
  ethPoolSupply: BigInt!
  "virtual Eth pool"
  virtualEthPoolSupply: BigInt!
  "lp token balances"
  lpTokenBalances: [LpTokenBalance!] @derivedFrom(field: "liquidityPool")
  "total trading volume on the market"
  totalVolume: BigInt!
  "total supply of liquidity pool tokens"
  lpTokenSupply: BigInt!
  "token price in eth"
  tokenPrice: BigInt!
  "valuation of meme"
  tokenValuation: BigInt!
  "liquidity pool creation block timestamp"
  createdAt: BigInt!
}

type LpTokenBalance @entity {
  id: ID!
  "liquidity pool"
  liquidityPool: LiquidityPool!
  "Address which holds this position"
  user: Account!
  "The amount of the token the user holds"
  balance: BigInt!
}

type Transaction @entity {
  "hash of the transaction"
  id: ID!
  "token amount into the AMM"
  inAmount: BigInt!
  "token amount(s) out of the AMM"
  outAmount: [BigInt!]
  "user who performed the transaction"
  user: Account!
  "token vault associated with the transaction"
  token: TokenVault!
  "type of the transaction"
  transactionType: TransactionType
  "timestamp"
  timestamp: BigInt!
}

enum TransactionType {
  BUY
  SELL
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
  COMMIT_TO_AUCTION
}

type MisoMarket @entity {
  "Address of the MISOMarket contract"
  id: ID!
  numberOfAuctions: BigInt!
  auctions: [Auction!] @derivedFrom(field: "market")
}

type Auction @entity {
  "Address of the auction (BatchAuction contract)"
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  "referred to as `totalTokens` in the contract"
  tokensForAuction: BigInt!
  minimumCommitmentAmount: BigInt!
  finalized: Boolean!
  "total number of tokens that have been committed"
  commitmentsTotal: BigInt!
  market: MisoMarket!
}
