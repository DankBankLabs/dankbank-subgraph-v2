/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DocumentsInterface extends ethers.utils.Interface {
  functions: {
    "getAllDocuments()": FunctionFragment;
    "getDocument(string)": FunctionFragment;
    "getDocumentCount()": FunctionFragment;
    "getDocumentName(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getDocument", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDocumentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentName",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentName",
    data: BytesLike
  ): Result;

  events: {
    "DocumentRemoved(string,string)": EventFragment;
    "DocumentUpdated(string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DocumentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DocumentUpdated"): EventFragment;
}

export class Documents extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DocumentsInterface;

  functions: {
    getAllDocuments(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllDocuments()"(overrides?: CallOverrides): Promise<[string[]]>;

    getDocument(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDocumentCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getDocumentCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

  "getAllDocuments()"(overrides?: CallOverrides): Promise<string[]>;

  getDocument(
    _name: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  "getDocument(string)"(
    _name: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getDocumentCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getDocumentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDocumentName(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDocumentName(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getAllDocuments(overrides?: CallOverrides): Promise<string[]>;

    "getAllDocuments()"(overrides?: CallOverrides): Promise<string[]>;

    getDocument(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getDocumentCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDocumentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    DocumentRemoved(
      _name: string | null,
      _data: null
    ): TypedEventFilter<[string, string], { _name: string; _data: string }>;

    DocumentUpdated(
      _name: string | null,
      _data: null
    ): TypedEventFilter<[string, string], { _name: string; _data: string }>;
  };

  estimateGas: {
    getAllDocuments(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllDocuments()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDocument(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getDocumentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllDocuments(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllDocuments()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocument(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocument(string)"(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDocumentCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentName(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocumentName(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
