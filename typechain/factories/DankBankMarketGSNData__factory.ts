/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { DankBankMarketGSNData } from "../DankBankMarketGSNData";

export class DankBankMarketGSNData__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DankBankMarketGSNData> {
    return super.deploy(overrides || {}) as Promise<DankBankMarketGSNData>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DankBankMarketGSNData {
    return super.attach(address) as DankBankMarketGSNData;
  }
  connect(signer: Signer): DankBankMarketGSNData__factory {
    return super.connect(signer) as DankBankMarketGSNData__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DankBankMarketGSNData {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DankBankMarketGSNData;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "investmentAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokensBought",
        type: "uint256",
      },
    ],
    name: "DankBankBuy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "returnAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokensSold",
        type: "uint256",
      },
    ],
    name: "DankBankSell",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "memeTokensAdded",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "paymentTokensAdded",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sharesMinted",
        type: "uint256",
      },
    ],
    name: "LiquidityAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "memeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "memeTokensRemoved",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "paymentTokensRemoved",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sharesBurnt",
        type: "uint256",
      },
    ],
    name: "LiquidityRemoved",
    type: "event",
  },
  {
    inputs: [],
    name: "paymentToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenPoolSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "virtualTokenPoolSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610119806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633013ce29146041578063545faeda146070578063879376b514609a575b600080fd5b6002546053906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b608d607b36600460b7565b60006020819052908152604090205481565b6040519081526020016067565b608d60a536600460b7565b60016020526000908152604090205481565b60006020828403121560c7578081fd5b81356001600160a01b038116811460dc578182fd5b939250505056fea2646970667358221220ecfd82967ce640aaecaa4e67598c58f85cd0b867f31d362a8affb9a88c2cd8ea64736f6c63430008040033";
