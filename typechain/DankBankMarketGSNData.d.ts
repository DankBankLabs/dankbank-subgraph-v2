/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DankBankMarketGSNDataInterface extends ethers.utils.Interface {
  functions: {
    "paymentToken()": FunctionFragment;
    "tokenPoolSupply(address)": FunctionFragment;
    "virtualTokenPoolSupply(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPoolSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualTokenPoolSupply",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPoolSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "virtualTokenPoolSupply",
    data: BytesLike
  ): Result;

  events: {
    "DankBankBuy(address,address,uint256,uint256)": EventFragment;
    "DankBankSell(address,address,uint256,uint256)": EventFragment;
    "LiquidityAdded(address,address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DankBankBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DankBankSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
}

export class DankBankMarketGSNData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DankBankMarketGSNDataInterface;

  functions: {
    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    "paymentToken()"(overrides?: CallOverrides): Promise<[string]>;

    tokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    virtualTokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "virtualTokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  paymentToken(overrides?: CallOverrides): Promise<string>;

  "paymentToken()"(overrides?: CallOverrides): Promise<string>;

  tokenPoolSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "tokenPoolSupply(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  virtualTokenPoolSupply(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "virtualTokenPoolSupply(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    paymentToken(overrides?: CallOverrides): Promise<string>;

    "paymentToken()"(overrides?: CallOverrides): Promise<string>;

    tokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    virtualTokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "virtualTokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    DankBankBuy(
      buyer: string | null,
      memeToken: null,
      investmentAmount: null,
      tokensBought: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        buyer: string;
        memeToken: string;
        investmentAmount: BigNumber;
        tokensBought: BigNumber;
      }
    >;

    DankBankSell(
      seller: string | null,
      memeToken: null,
      returnAmount: null,
      tokensSold: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        seller: string;
        memeToken: string;
        returnAmount: BigNumber;
        tokensSold: BigNumber;
      }
    >;

    LiquidityAdded(
      funder: string | null,
      memeToken: null,
      memeTokensAdded: null,
      paymentTokensAdded: null,
      sharesMinted: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        funder: string;
        memeToken: string;
        memeTokensAdded: BigNumber;
        paymentTokensAdded: BigNumber;
        sharesMinted: BigNumber;
      }
    >;

    LiquidityRemoved(
      funder: string | null,
      memeToken: null,
      memeTokensRemoved: null,
      paymentTokensRemoved: null,
      sharesBurnt: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        funder: string;
        memeToken: string;
        memeTokensRemoved: BigNumber;
        paymentTokensRemoved: BigNumber;
        sharesBurnt: BigNumber;
      }
    >;
  };

  estimateGas: {
    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    "paymentToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    virtualTokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "virtualTokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paymentToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    virtualTokenPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "virtualTokenPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
