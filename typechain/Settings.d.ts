/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SettingsInterface extends ethers.utils.Interface {
  functions: {
    "feeReceiver()": FunctionFragment;
    "governanceFee()": FunctionFragment;
    "maxAuctionLength()": FunctionFragment;
    "maxCuratorFee()": FunctionFragment;
    "maxGovFee()": FunctionFragment;
    "maxMaxAuctionLength()": FunctionFragment;
    "maxMinBidIncrease()": FunctionFragment;
    "maxReserveFactor()": FunctionFragment;
    "minAuctionLength()": FunctionFragment;
    "minBidIncrease()": FunctionFragment;
    "minMinAuctionLength()": FunctionFragment;
    "minMinBidIncrease()": FunctionFragment;
    "minReserveFactor()": FunctionFragment;
    "minVotePercentage()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeReceiver(address)": FunctionFragment;
    "setGovernanceFee(uint256)": FunctionFragment;
    "setMaxAuctionLength(uint256)": FunctionFragment;
    "setMaxCuratorFee(uint256)": FunctionFragment;
    "setMaxReserveFactor(uint256)": FunctionFragment;
    "setMinAuctionLength(uint256)": FunctionFragment;
    "setMinBidIncrease(uint256)": FunctionFragment;
    "setMinReserveFactor(uint256)": FunctionFragment;
    "setMinVotePercentage(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAuctionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxCuratorFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxGovFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxMaxAuctionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMinBidIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minMinAuctionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minMinBidIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minReserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVotePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxAuctionLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCuratorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBidIncrease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinVotePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCuratorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxGovFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMaxAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMinBidIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minMinAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minMinBidIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVotePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCuratorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBidIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinVotePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateCuratorFee(uint256,uint256)": EventFragment;
    "UpdateFeeReceiver(address,address)": EventFragment;
    "UpdateGovernanceFee(uint256,uint256)": EventFragment;
    "UpdateMaxAuctionLength(uint256,uint256)": EventFragment;
    "UpdateMaxReserveFactor(uint256,uint256)": EventFragment;
    "UpdateMinAuctionLength(uint256,uint256)": EventFragment;
    "UpdateMinBidIncrease(uint256,uint256)": EventFragment;
    "UpdateMinReserveFactor(uint256,uint256)": EventFragment;
    "UpdateMinVotePercentage(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCuratorFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGovernanceFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxAuctionLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinAuctionLength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinBidIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinReserveFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMinVotePercentage"): EventFragment;
}

export class Settings extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SettingsInterface;

  functions: {
    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<[string]>;

    governanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "governanceFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAuctionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxAuctionLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxCuratorFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxCuratorFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGovFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxGovFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMaxAuctionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxMaxAuctionLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMinBidIncrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxMinBidIncrease()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxReserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxReserveFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuctionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minAuctionLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBidIncrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minBidIncrease()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minMinAuctionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minMinAuctionLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minMinBidIncrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minMinBidIncrease()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minReserveFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVotePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minVotePercentage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernanceFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernanceFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxAuctionLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCuratorFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxCuratorFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxReserveFactor(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinAuctionLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinBidIncrease(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinBidIncrease(uint256)"(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinReserveFactor(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinVotePercentage(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinVotePercentage(uint256)"(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

  governanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  "governanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

  "maxAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxCuratorFee(overrides?: CallOverrides): Promise<BigNumber>;

  "maxCuratorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxGovFee(overrides?: CallOverrides): Promise<BigNumber>;

  "maxGovFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxMaxAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMaxAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxMinBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMinBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "maxReserveFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

  "minAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  minBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

  "minBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

  minMinAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

  "minMinAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  minMinBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

  "minMinBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

  minReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "minReserveFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  minVotePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "minVotePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeeReceiver(address)"(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernanceFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernanceFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxAuctionLength(
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxAuctionLength(uint256)"(
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCuratorFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxCuratorFee(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxReserveFactor(
    _factor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxReserveFactor(uint256)"(
    _factor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinAuctionLength(
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinAuctionLength(uint256)"(
    _length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinBidIncrease(
    _min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinBidIncrease(uint256)"(
    _min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinReserveFactor(
    _factor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinReserveFactor(uint256)"(
    _factor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinVotePercentage(
    _min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinVotePercentage(uint256)"(
    _min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feeReceiver(overrides?: CallOverrides): Promise<string>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

    governanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxCuratorFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxCuratorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxGovFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxGovFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMaxAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMaxAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMinBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMinBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReserveFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "minBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    minMinAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "minMinAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    minMinBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "minMinBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    minReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "minReserveFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    minVotePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "minVotePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeeReceiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernanceFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxAuctionLength(
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCuratorFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxCuratorFee(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxReserveFactor(
      _factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuctionLength(
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBidIncrease(
      _min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBidIncrease(uint256)"(
      _min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReserveFactor(
      _factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinVotePercentage(
      _min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinVotePercentage(uint256)"(
      _min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    UpdateCuratorFee(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateFeeReceiver(
      _old: null,
      _new: null
    ): TypedEventFilter<[string, string], { _old: string; _new: string }>;

    UpdateGovernanceFee(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateMaxAuctionLength(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateMaxReserveFactor(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateMinAuctionLength(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateMinBidIncrease(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateMinReserveFactor(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;

    UpdateMinVotePercentage(
      _old: null,
      _new: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _old: BigNumber; _new: BigNumber }
    >;
  };

  estimateGas: {
    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    governanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "maxAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxCuratorFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxCuratorFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxGovFee(overrides?: CallOverrides): Promise<BigNumber>;

    "maxGovFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMaxAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMaxAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxMinBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMinBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "maxReserveFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "minAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    minBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "minBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    minMinAuctionLength(overrides?: CallOverrides): Promise<BigNumber>;

    "minMinAuctionLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    minMinBidIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    "minMinBidIncrease()"(overrides?: CallOverrides): Promise<BigNumber>;

    minReserveFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "minReserveFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    minVotePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "minVotePercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernanceFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernanceFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxAuctionLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCuratorFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxCuratorFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxReserveFactor(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinAuctionLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinBidIncrease(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinBidIncrease(uint256)"(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinReserveFactor(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinVotePercentage(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinVotePercentage(uint256)"(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governanceFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAuctionLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxAuctionLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCuratorFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxCuratorFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGovFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxGovFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMaxAuctionLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxMaxAuctionLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMinBidIncrease(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxMinBidIncrease()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxReserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxReserveFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minAuctionLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBidIncrease(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minBidIncrease()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minMinAuctionLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minMinAuctionLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minMinBidIncrease(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minMinBidIncrease()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minReserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minReserveFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVotePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minVotePercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeReceiver(address)"(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernanceFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxAuctionLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCuratorFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxCuratorFee(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxReserveFactor(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinAuctionLength(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinAuctionLength(uint256)"(
      _length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinBidIncrease(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinBidIncrease(uint256)"(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinReserveFactor(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinReserveFactor(uint256)"(
      _factor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinVotePercentage(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinVotePercentage(uint256)"(
      _min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
