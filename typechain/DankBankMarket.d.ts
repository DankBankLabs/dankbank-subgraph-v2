/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DankBankMarketInterface extends ethers.utils.Interface {
  functions: {
    "FEE_MULTIPLIER()": FunctionFragment;
    "MULTIPLIER_SUB_ONE()": FunctionFragment;
    "_tokenSupplies(uint256)": FunctionFragment;
    "addLiquidity(address,uint256,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "buy(address,uint256)": FunctionFragment;
    "calculateBuyTokensOut(address,uint256)": FunctionFragment;
    "calculateSellEthOut(address,uint256)": FunctionFragment;
    "ethPoolSupply(address)": FunctionFragment;
    "getTokenId(address)": FunctionFragment;
    "getTotalEthPoolSupply(address)": FunctionFragment;
    "init(string)": FunctionFragment;
    "initPool(address,uint256,uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lpTokenSupply(uint256)": FunctionFragment;
    "removeLiquidity(address,uint256,uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "sell(address,uint256,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "virtualEthPoolSupply(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTIPLIER_SUB_ONE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenSupplies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBuyTokensOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSellEthOut",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethPoolSupply",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalEthPoolSupply",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initPool",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "virtualEthPoolSupply",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTIPLIER_SUB_ONE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_tokenSupplies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBuyTokensOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSellEthOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethPoolSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEthPoolSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "virtualEthPoolSupply",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "DankBankBuy(address,address,uint256,uint256)": EventFragment;
    "DankBankSell(address,address,uint256,uint256)": EventFragment;
    "LiquidityAdded(address,address,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,address,uint256,uint256,uint256)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DankBankBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DankBankSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class DankBankMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DankBankMarketInterface;

  functions: {
    FEE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FEE_MULTIPLIER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MULTIPLIER_SUB_ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MULTIPLIER_SUB_ONE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _tokenSupplies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_tokenSupplies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addLiquidity(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addLiquidity(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    buy(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buy(address,uint256)"(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBuyTokensOut(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokensOut: BigNumber }>;

    "calculateBuyTokensOut(address,uint256)"(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokensOut: BigNumber }>;

    calculateSellEthOut(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ethOut: BigNumber }>;

    "calculateSellEthOut(address,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ethOut: BigNumber }>;

    ethPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ethPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenId(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTokenId(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalEthPoolSupply(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalEthPoolSupply(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(string)"(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initPool(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initPool(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lpTokenSupply(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lpTokenSupply(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeLiquidity(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeLiquidity(address,uint256,uint256,uint256)"(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sell(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sell(address,uint256,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    virtualEthPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "virtualEthPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  FEE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  "FEE_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

  MULTIPLIER_SUB_ONE(overrides?: CallOverrides): Promise<BigNumber>;

  "MULTIPLIER_SUB_ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

  _tokenSupplies(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_tokenSupplies(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addLiquidity(
    token: string,
    inputAmount: BigNumberish,
    minEthAdded: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addLiquidity(address,uint256,uint256)"(
    token: string,
    inputAmount: BigNumberish,
    minEthAdded: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  buy(
    token: string,
    minTokensOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buy(address,uint256)"(
    token: string,
    minTokensOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBuyTokensOut(
    token: string,
    ethIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateBuyTokensOut(address,uint256)"(
    token: string,
    ethIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSellEthOut(
    token: string,
    tokensIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSellEthOut(address,uint256)"(
    token: string,
    tokensIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ethPoolSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "ethPoolSupply(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenId(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getTokenId(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalEthPoolSupply(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalEthPoolSupply(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(string)"(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initPool(
    token: string,
    inputAmount: BigNumberish,
    initVirtualEthSupply: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initPool(address,uint256,uint256)"(
    token: string,
    inputAmount: BigNumberish,
    initVirtualEthSupply: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lpTokenSupply(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lpTokenSupply(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    token: string,
    burnAmount: BigNumberish,
    minTokens: BigNumberish,
    minEth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeLiquidity(address,uint256,uint256,uint256)"(
    token: string,
    burnAmount: BigNumberish,
    minTokens: BigNumberish,
    minEth: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sell(
    token: string,
    tokensIn: BigNumberish,
    minEthOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sell(address,uint256,uint256)"(
    token: string,
    tokensIn: BigNumberish,
    minEthOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  virtualEthPoolSupply(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "virtualEthPoolSupply(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    FEE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER_SUB_ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "MULTIPLIER_SUB_ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenSupplies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_tokenSupplies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    buy(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(address,uint256)"(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateBuyTokensOut(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateBuyTokensOut(address,uint256)"(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSellEthOut(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSellEthOut(address,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethPoolSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ethPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenId(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEthPoolSupply(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalEthPoolSupply(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(uri: string, overrides?: CallOverrides): Promise<void>;

    "init(string)"(uri: string, overrides?: CallOverrides): Promise<void>;

    initPool(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initPool(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lpTokenSupply(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpTokenSupply(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(address,uint256,uint256,uint256)"(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sell(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(address,uint256,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    virtualEthPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "virtualEthPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    DankBankBuy(
      buyer: string | null,
      token: null,
      investmentAmount: null,
      tokensBought: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        buyer: string;
        token: string;
        investmentAmount: BigNumber;
        tokensBought: BigNumber;
      }
    >;

    DankBankSell(
      seller: string | null,
      token: null,
      returnAmount: null,
      tokensSold: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        seller: string;
        token: string;
        returnAmount: BigNumber;
        tokensSold: BigNumber;
      }
    >;

    LiquidityAdded(
      funder: string | null,
      token: null,
      amountAdded: null,
      sharesMinted: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        funder: string;
        token: string;
        amountAdded: BigNumber;
        sharesMinted: BigNumber;
      }
    >;

    LiquidityRemoved(
      funder: string | null,
      token: null,
      tokensRemoved: null,
      ethRemoved: null,
      sharesBurnt: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        funder: string;
        token: string;
        tokensRemoved: BigNumber;
        ethRemoved: BigNumber;
        sharesBurnt: BigNumber;
      }
    >;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    URI(
      value: null,
      id: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    FEE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_MULTIPLIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    MULTIPLIER_SUB_ONE(overrides?: CallOverrides): Promise<BigNumber>;

    "MULTIPLIER_SUB_ONE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenSupplies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_tokenSupplies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidity(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addLiquidity(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buy(address,uint256)"(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateBuyTokensOut(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateBuyTokensOut(address,uint256)"(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSellEthOut(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSellEthOut(address,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethPoolSupply(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ethPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenId(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEthPoolSupply(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalEthPoolSupply(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(string)"(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initPool(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initPool(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenSupply(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lpTokenSupply(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeLiquidity(address,uint256,uint256,uint256)"(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sell(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sell(address,uint256,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    virtualEthPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "virtualEthPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEE_MULTIPLIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MULTIPLIER_SUB_ONE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MULTIPLIER_SUB_ONE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _tokenSupplies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_tokenSupplies(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addLiquidity(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      minEthAdded: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256)"(
      token: string,
      minTokensOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBuyTokensOut(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateBuyTokensOut(address,uint256)"(
      token: string,
      ethIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSellEthOut(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSellEthOut(address,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ethPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenId(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEthPoolSupply(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalEthPoolSupply(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(string)"(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initPool(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initPool(address,uint256,uint256)"(
      token: string,
      inputAmount: BigNumberish,
      initVirtualEthSupply: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenSupply(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lpTokenSupply(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(address,uint256,uint256,uint256)"(
      token: string,
      burnAmount: BigNumberish,
      minTokens: BigNumberish,
      minEth: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sell(address,uint256,uint256)"(
      token: string,
      tokensIn: BigNumberish,
      minEthOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    virtualEthPoolSupply(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "virtualEthPoolSupply(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
