// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LiquidityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenPoolSupply", Value.fromBigInt(BigInt.zero()));
    this.set("virtualTokenPoolSupply", Value.fromBigInt(BigInt.zero()));
    this.set("lpTokenSupply", Value.fromBigInt(BigInt.zero()));
    this.set("totalVolume", Value.fromBigInt(BigInt.zero()));
    this.set("memeTokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("memeTotalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("memeMarketSupply", Value.fromBigInt(BigInt.zero()));
    this.set("memeValuation", Value.fromBigInt(BigInt.zero()));
    this.set("symbol", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidityPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidityPool", id.toString(), this);
    }
  }

  static load(id: string): LiquidityPool | null {
    return changetype<LiquidityPool | null>(store.get("LiquidityPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenPoolSupply(): BigInt {
    let value = this.get("tokenPoolSupply");
    return value!.toBigInt();
  }

  set tokenPoolSupply(value: BigInt) {
    this.set("tokenPoolSupply", Value.fromBigInt(value));
  }

  get virtualTokenPoolSupply(): BigInt {
    let value = this.get("virtualTokenPoolSupply");
    return value!.toBigInt();
  }

  set virtualTokenPoolSupply(value: BigInt) {
    this.set("virtualTokenPoolSupply", Value.fromBigInt(value));
  }

  get lpTokenBalances(): Array<string> | null {
    let value = this.get("lpTokenBalances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set lpTokenBalances(value: Array<string> | null) {
    if (!value) {
      this.unset("lpTokenBalances");
    } else {
      this.set("lpTokenBalances", Value.fromStringArray(<Array<string>>value));
    }
  }

  get lpTokenSupply(): BigInt {
    let value = this.get("lpTokenSupply");
    return value!.toBigInt();
  }

  set lpTokenSupply(value: BigInt) {
    this.set("lpTokenSupply", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    return value!.toBigInt();
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get memeTokenPrice(): BigInt {
    let value = this.get("memeTokenPrice");
    return value!.toBigInt();
  }

  set memeTokenPrice(value: BigInt) {
    this.set("memeTokenPrice", Value.fromBigInt(value));
  }

  get memeTotalSupply(): BigInt {
    let value = this.get("memeTotalSupply");
    return value!.toBigInt();
  }

  set memeTotalSupply(value: BigInt) {
    this.set("memeTotalSupply", Value.fromBigInt(value));
  }

  get memeMarketSupply(): BigInt {
    let value = this.get("memeMarketSupply");
    return value!.toBigInt();
  }

  set memeMarketSupply(value: BigInt) {
    this.set("memeMarketSupply", Value.fromBigInt(value));
  }

  get memeValuation(): BigInt {
    let value = this.get("memeValuation");
    return value!.toBigInt();
  }

  set memeValuation(value: BigInt) {
    this.set("memeValuation", Value.fromBigInt(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class LpTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidityPool", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LpTokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LpTokenBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LpTokenBalance", id.toString(), this);
    }
  }

  static load(id: string): LpTokenBalance | null {
    return changetype<LpTokenBalance | null>(store.get("LpTokenBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidityPool(): string {
    let value = this.get("liquidityPool");
    return value!.toString();
  }

  set liquidityPool(value: string) {
    this.set("liquidityPool", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class MisoMarket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("numberOfAuctions", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MisoMarket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MisoMarket entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MisoMarket", id.toString(), this);
    }
  }

  static load(id: string): MisoMarket | null {
    return changetype<MisoMarket | null>(store.get("MisoMarket", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberOfAuctions(): BigInt {
    let value = this.get("numberOfAuctions");
    return value!.toBigInt();
  }

  set numberOfAuctions(value: BigInt) {
    this.set("numberOfAuctions", Value.fromBigInt(value));
  }

  get auctions(): Array<string> | null {
    let value = this.get("auctions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set auctions(value: Array<string> | null) {
    if (!value) {
      this.unset("auctions");
    } else {
      this.set("auctions", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("startTime", Value.fromBigInt(BigInt.zero()));
    this.set("endTime", Value.fromBigInt(BigInt.zero()));
    this.set("tokensForAuction", Value.fromBigInt(BigInt.zero()));
    this.set("minimumCommitmentAmount", Value.fromBigInt(BigInt.zero()));
    this.set("finalized", Value.fromBoolean(false));
    this.set("commitmentsTotal", Value.fromBigInt(BigInt.zero()));
    this.set("market", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Auction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Auction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Auction", id.toString(), this);
    }
  }

  static load(id: string): Auction | null {
    return changetype<Auction | null>(store.get("Auction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get tokensForAuction(): BigInt {
    let value = this.get("tokensForAuction");
    return value!.toBigInt();
  }

  set tokensForAuction(value: BigInt) {
    this.set("tokensForAuction", Value.fromBigInt(value));
  }

  get minimumCommitmentAmount(): BigInt {
    let value = this.get("minimumCommitmentAmount");
    return value!.toBigInt();
  }

  set minimumCommitmentAmount(value: BigInt) {
    this.set("minimumCommitmentAmount", Value.fromBigInt(value));
  }

  get finalized(): boolean {
    let value = this.get("finalized");
    return value!.toBoolean();
  }

  set finalized(value: boolean) {
    this.set("finalized", Value.fromBoolean(value));
  }

  get commitmentsTotal(): BigInt {
    let value = this.get("commitmentsTotal");
    return value!.toBigInt();
  }

  set commitmentsTotal(value: BigInt) {
    this.set("commitmentsTotal", Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("inAmount", Value.fromBigInt(BigInt.zero()));
    this.set("account", Value.fromString(""));
    this.set("liquidityPool", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inAmount(): BigInt {
    let value = this.get("inAmount");
    return value!.toBigInt();
  }

  set inAmount(value: BigInt) {
    this.set("inAmount", Value.fromBigInt(value));
  }

  get outAmount(): Array<BigInt> | null {
    let value = this.get("outAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set outAmount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("outAmount");
    } else {
      this.set("outAmount", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get liquidityPool(): string {
    let value = this.get("liquidityPool");
    return value!.toString();
  }

  set liquidityPool(value: string) {
    this.set("liquidityPool", Value.fromString(value));
  }

  get transactionType(): string | null {
    let value = this.get("transactionType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionType(value: string | null) {
    if (!value) {
      this.unset("transactionType");
    } else {
      this.set("transactionType", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
