# Liquidity pool contains all the information necessary to run the markets
type LiquidityPool @entity {
  "token vault address"
  id: ID!
  "token pool"
  tokenPoolSupply: BigInt!
  "virtual token pool"
  virtualTokenPoolSupply: BigInt!
  "liquidity pool token balances"
  lpTokenBalances: [LpTokenBalance!] @derivedFrom(field: "liquidityPool")
  "total supply of liquidity pool tokens"
  lpTokenSupply: BigInt!
  "total trading volume on the market"
  totalVolume: BigInt!
  "token price relative to tokenPoolSupply"
  memeTokenPrice: BigInt!
  "The amount of fractionalized (meme) tokens"
  memeTotalSupply: BigInt!
  "The amount of fractionalized (meme) tokens the markets own"
  memeMarketSupply: BigInt!
  "valuation of meme"
  memeValuation: BigInt!
  "symbol"
  symbol: String!
  "name"
  name: String!
  "liquidity pool creation block timestamp"
  createdAt: BigInt!
}

type LpTokenBalance @entity {
  "liquidityPool + userAddress"
  id: ID!
  "liquidity pool"
  liquidityPool: LiquidityPool!
  "The amount of the token the user holds"
  balance: BigInt!
}

enum TransactionType {
  BUY
  SELL
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
  CLAIM_FROM_AIRDROP
}

type Transaction @entity {
  "hash of the transaction"
  id: ID!
  "token amount into the AMM"
  inAmount: BigInt!
  "token amount out of the AMM"
  outAmount: [BigInt!]
  "account address who performed the transaction"
  account: String!
  "liquidity pool associated with the transaction"
  liquidityPool: LiquidityPool!
  "type of the transaction"
  transactionType: TransactionType
  "timestamp"
  timestamp: BigInt!
}
