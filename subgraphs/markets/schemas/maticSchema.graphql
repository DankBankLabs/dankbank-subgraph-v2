"TO-DO: Need to remove eth references + add paymentToken references on LPs etc"
type Account @entity {
  "User address"
  id: ID!
  "liqudity token balances"
  liquidityTokenBalances: [LpTokenBalance!] @derivedFrom(field: "user")
  "token positions"
  tokenBalances: [TokenBalance!] @derivedFrom(field: "user")
}

type TokenBalance @entity {
  id: ID!
  "token"
  token: TokenVault!
  "Address which holds this position"
  user: Account!
  "The amount of the token the user holds"
  balance: BigInt!
}

type TokenVault @entity {
  "address"
  id: ID!
  "token positions"
  tokenPositions: [TokenBalance!] @derivedFrom(field: "token")
  "erc721 token"
  erc721: ERC721Token
  "liquidity pool"
  liquidityPool: MaticLiquidityPool @derivedFrom(field: "token")
  "total supply"
  totalSupply: BigInt!
  "symbol"
  symbol: String!
  "name"
  name: String!
  "decimals"
  decimals: BigInt!
  "address that initially deposited the NFT"
  curator: Account
  "fee paid to curator yearly"
  fee: BigInt
}

type ERC721Token @entity {
  id: ID!
  "address"
  address: String!
  "tokenId"
  tokenId: BigInt!
  "tokenVault"
  tokenVault: TokenVault @derivedFrom(field: "erc721")
  "uri"
  uri: String
}

# TokenBalance should be the single source of truth on the LiquidityPool token balance
type MaticLiquidityPool @entity {
  id: ID!
  "token"
  token: TokenVault!
  "payment token pool supply"
  tokenPoolSupply: BigInt!
  "virtual payment token pool supply"
  virtualTokenPoolSupply: BigInt!
  "lp token balances"
  lpTokenBalances: [LpTokenBalance!] @derivedFrom(field: "liquidityPool")
  "total trading volume on the market"
  totalVolume: BigInt!
  "total supply of liquidity pool tokens"
  lpTokenSupply: BigInt!
  "token price in payment token"
  tokenPrice: BigInt!
  "liquidity pool creation block timestamp"
  createdAt: BigInt!
}

type LpTokenBalance @entity {
  id: ID!
  "liquidity pool"
  liquidityPool: MaticLiquidityPool!
  "Address which holds this position"
  user: Account!
  "The amount of the token the user holds"
  balance: BigInt!
}

type Transaction @entity {
  "hash of the transaction"
  id: ID!
  "token amount into the AMM"
  inAmount: BigInt!
  "token amount(s) out of the AMM"
  outAmount: [BigInt!]
  "user who performed the transaction"
  user: Account!
  "token vault associated with the transaction"
  token: TokenVault!
  "type of the transaction"
  transactionType: TransactionType
  "timestamp"
  timestamp: BigInt!
}

enum TransactionType {
  BUY
  SELL
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
}
